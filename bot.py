import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials

API_TOKEN = '7531893339:AAEveLuB5grak6VHu78enCPJDwWWkCi0E8c'
ADMIN_ID = 5473537631

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
CREDENTIALS_FILE = 'honestalmatybot-b81f425fb588.json'
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
gc = gspread.authorize(credentials)
spreadsheet_id = '1nPcx56Y0FQ0Y0754BPuUp2i_zSjb1KW1N586PhsCNVY'
sheet = gc.open_by_key(spreadsheet_id).sheet1

# –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π"), KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")],
        [KeyboardButton(text="üî• –¢–æ–ø —Å–∫–∏–¥–æ–∫"), KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É")],
        [KeyboardButton(text="üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"), KeyboardButton(text="‚öôÔ∏è –û –±–æ—Ç–µ"), KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# Inline –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã", callback_data="cat_phones")],
    [InlineKeyboardButton(text="üëö –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", callback_data="cat_clothes")],
    [InlineKeyboardButton(text="üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="cat_electronics")],
    [InlineKeyboardButton(text="üç≥ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫—É—Ö–Ω–∏", callback_data="cat_kitchen")],
    [InlineKeyboardButton(text="üõã –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", callback_data="cat_home")],
    [InlineKeyboardButton(text="üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="cat_kids")],
    [InlineKeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö", callback_data="cat_sport")],
    [InlineKeyboardButton(text="üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="cat_beauty")],
    [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –∫–æ–Ω—Å–æ–ª–∏", callback_data="cat_games")],
    [InlineKeyboardButton(text="üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ", callback_data="cat_auto")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# Inline —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–∫–∏–¥–æ–∫
discount_filter_menu = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üîñ –î–æ 50%", callback_data="discount_50"),
        InlineKeyboardButton(text="üîñ 60%", callback_data="discount_60"),
        InlineKeyboardButton(text="üîñ 70%", callback_data="discount_70")
    ],
    [
        InlineKeyboardButton(text="üîñ 80%", callback_data="discount_80"),
        InlineKeyboardButton(text="üîñ 90%", callback_data="discount_90"),
        InlineKeyboardButton(text="üîñ 95%", callback_data="discount_95")
    ]
])

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SearchStates(StatesGroup):
    waiting_for_query = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º–∞ –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–∏–∞–ª–∞
def is_premium(user_id):
    user = users_db.get(user_id)
    if not user:
        return False
    if user['status'] == 'premium':
        return True
    if user['status'] == 'trial' and user['trial_end'] > datetime.now():
        return True
    return False

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
async def send_product(target, record):
    text = (
        f"üì¶ {record['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}\n"
        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
        f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {record['–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞']}\n"
        f"üî• –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {record['–ù–æ–≤–∞—è —Ü–µ–Ω–∞']}\n"
        f"üéØ –°–∫–∏–¥–∫–∞: {record['–°–∫–∏–¥–∫–∞ (%)']}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({record['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä']})\n"
        f"üìù {record['–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏']}"
    )
    await target.answer(text, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {'status': 'trial', 'trial_start': datetime.now(), 'trial_end': datetime.now() + timedelta(days=3)}
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SaleHunterKz!", reply_markup=main_menu)

# üëâ /premium
@dp.message(F.text.startswith("/premium"))
async def give_premium(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
        return
    try:
        parts = message.text.split()
        target_id = int(parts[1])
        if target_id not in users_db:
            users_db[target_id] = {}
        users_db[target_id]['status'] = 'premium'
        await message.answer(f"‚úÖ –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
@dp.message(SearchStates.waiting_for_query)
async def process_search(message: types.Message, state: FSMContext):
    query = message.text.lower()
    records = sheet.get_all_records()
    found = False
    for record in records:
        if query in record['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'].lower():
            await send_product(message, record)
            found = True
    if not found:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    await state.clear()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message()
async def main_menu_handler(message: types.Message, state: FSMContext):
    text = message.text
    if text == "üõç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π":
        records = sheet.get_all_records()
        for record in records:
            await send_product(message, record)
    elif text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_menu)
    elif text == "üîé –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
        await state.set_state(SearchStates.waiting_for_query)
    elif text == "üî• –¢–æ–ø —Å–∫–∏–¥–æ–∫":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∏–¥–∫—É:", reply_markup=discount_filter_menu)
    elif text == "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫":
        await message.answer("üåç –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!")
    elif text == "‚öôÔ∏è –û –±–æ—Ç–µ":
        await message.answer("‚öôÔ∏è SaleHunterKz - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–æ–∏—Å–∫–µ –ª—É—á—à–∏—Ö —Å–∫–∏–¥–æ–∫!\nüõç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —Ç–æ–ø –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ª—É—á—à–∏–µ —Ü–µ–Ω—ã!")
    elif text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        support_button = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/Yesnoyesno123")]]
        )
        await message.answer("üìû –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:", reply_markup=support_button)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–∏–¥–∫–µ
@dp.callback_query(F.data.startswith("discount_"))
async def discount_filter(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    records = sheet.get_all_records()
    found = False

    selected_discount = int(callback.data.split('_')[1])

    if selected_discount == 50:
        for record in records:
            discount_value = int(record['–°–∫–∏–¥–∫–∞ (%)'].replace('%', ''))
            if discount_value <= 50:
                await send_product(callback.message, record)
                found = True
    else:
        if not is_premium(user_id):
            await callback.message.answer("‚è≥ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–∏–¥–æ–∫ –≤—ã—à–µ 50% –Ω—É–∂–Ω–∞ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @Yesnoyesno123")
            await callback.answer()
            return
        for record in records:
            discount_value = int(record['–°–∫–∏–¥–∫–∞ (%)'].replace('%', ''))
            if discount_value >= selected_discount:
                await send_product(callback.message, record)
                found = True

    if not found:
        await callback.message.answer("üòî –ü–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–∞–∫–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

    await callback.answer()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query()
async def category_filter(callback: types.CallbackQuery):
    data = callback.data
    if data == "back_to_main":
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)
        await callback.answer()
        return
    category_map = {
        "cat_phones": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã",
        "cat_clothes": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
        "cat_electronics": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
        "cat_kitchen": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫—É—Ö–Ω–∏",
        "cat_home": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞",
        "cat_kids": "–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
        "cat_sport": "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö",
        "cat_beauty": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
        "cat_games": "–ò–≥—Ä—ã –∏ –∫–æ–Ω—Å–æ–ª–∏",
        "cat_auto": "–ê–≤—Ç–æ –∏ –º–æ—Ç–æ",
    }
    selected = category_map.get(data)
    if selected:
        records = sheet.get_all_records()
        for record in records:
            if record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == selected:
                await send_product(callback.message, record)
    await callback.answer()

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
