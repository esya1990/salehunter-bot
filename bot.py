import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from datetime import datetime, timedelta
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
import json

API_TOKEN = os.getenv("BOT_TOKEN")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")
GOOGLE_CREDENTIALS = json.loads(GOOGLE_CREDENTIALS_JSON)

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(GOOGLE_CREDENTIALS, scope)
gc = gspread.authorize(credentials)
spreadsheet_id = os.getenv("SPREADSHEET_ID")
sheet = gc.open_by_key(spreadsheet_id).sheet1

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
users_db = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="üõç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π"),
            KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
        ],
        [
            KeyboardButton(text="üî• –¢–æ–ø —Å–∫–∏–¥–æ–∫"),
            KeyboardButton(text="üîé –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        ],
        [
            KeyboardButton(text="üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
            KeyboardButton(text="‚öôÔ∏è –û –±–æ—Ç–µ"),
            KeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
        ]
    ],
    resize_keyboard=True
)

# Inline –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
categories_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üì± –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã", callback_data="cat_phones")],
    [InlineKeyboardButton(text="üëö –û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", callback_data="cat_clothes")],
    [InlineKeyboardButton(text="üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", callback_data="cat_electronics")],
    [InlineKeyboardButton(text="üç≥ –¢–æ–≤–∞—Ä—ã –¥–ª—è –∫—É—Ö–Ω–∏", callback_data="cat_kitchen")],
    [InlineKeyboardButton(text="üõã –¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞", callback_data="cat_home")],
    [InlineKeyboardButton(text="üß∏ –î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã", callback_data="cat_kids")],
    [InlineKeyboardButton(text="üèãÔ∏è‚Äç‚ôÇÔ∏è –°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö", callback_data="cat_sport")],
    [InlineKeyboardButton(text="üíÑ –ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", callback_data="cat_beauty")],
    [InlineKeyboardButton(text="üéÆ –ò–≥—Ä—ã –∏ –∫–æ–Ω—Å–æ–ª–∏", callback_data="cat_games")],
    [InlineKeyboardButton(text="üöó –ê–≤—Ç–æ –∏ –º–æ—Ç–æ", callback_data="cat_auto")],
    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_db:
        users_db[user_id] = {
            'status': 'trial',
            'trial_start': datetime.now(),
            'trial_end': datetime.now() + timedelta(days=3)
        }
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SaleHunterKz!\n\n"
            "üéâ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_menu
        )
    else:
        await message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message()
async def menu_handler(message: types.Message):
    text = message.text
    if text == "üõç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä —Å–æ —Å–∫–∏–¥–∫–æ–π":
        records = sheet.get_all_records()
        if records:
            for record in records:
                await message.answer(
                    f"üì¶ {record['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}\n"
                    f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
                    f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {record['–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞']}\n"
                    f"üî• –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {record['–ù–æ–≤–∞—è —Ü–µ–Ω–∞']}\n"
                    f"üéØ –°–∫–∏–¥–∫–∞: {record['–°–∫–∏–¥–∫–∞ (%)']}\n"
                    f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({record['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä']})\n"
                    f"üìù {record['–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏']}",
                    parse_mode="Markdown"
                )
    elif text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    data = callback.data

    if data == "back_to_main":
        await callback.message.answer("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é:", reply_markup=main_menu)
        await callback.answer()

    elif data.startswith("cat_"):
        category_map = {
            "cat_phones": "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ –≥–∞–¥–∂–µ—Ç—ã",
            "cat_clothes": "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å",
            "cat_electronics": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
            "cat_kitchen": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –∫—É—Ö–Ω–∏",
            "cat_home": "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–æ–º–∞",
            "cat_kids": "–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
            "cat_sport": "–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö",
            "cat_beauty": "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
            "cat_games": "–ò–≥—Ä—ã –∏ –∫–æ–Ω—Å–æ–ª–∏",
            "cat_auto": "–ê–≤—Ç–æ –∏ –º–æ—Ç–æ",
        }
        selected_category = category_map.get(data)
        if selected_category:
            records = sheet.get_all_records()
            found = False
            for record in records:
                if record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == selected_category:
                    await callback.message.answer(
                        f"üì¶ {record['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}\n"
                        f"üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {record['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}\n"
                        f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {record['–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞']}\n"
                        f"üî• –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {record['–ù–æ–≤–∞—è —Ü–µ–Ω–∞']}\n"
                        f"üéØ –°–∫–∏–¥–∫–∞: {record['–°–∫–∏–¥–∫–∞ (%)']}\n"
                        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É]({record['–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä']})\n"
                        f"üìù {record['–û–ø–∏—Å–∞–Ω–∏–µ —Å–∫–∏–¥–∫–∏']}",
                        parse_mode="Markdown"
                    )
                    found = True
            if not found:
                await callback.message.answer(f"üòî –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {selected_category} –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ polling
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())


